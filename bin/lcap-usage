#!/usr/bin/env node

const path = require('path');
const fs = require('fs-extra');
const { getUsage, getNewUsage } = require('../lib/usage');
const utils = require('../lib/utils');
const root = process.cwd();

const program = require('commander');
const callZip = require('../lib/zip');
const vusion = require('vusion-api');
const cli = vusion.cli;

program
    .usage('<dest>')
    .description(`Generate usage json`)
    .option('-t, --type <type>', 'type', 'component')
    .option('-v, --version <version>', 'version', 'new')
    .option('--platform <platform>', `Usage platform`)
    .parse(process.argv);

let staticUrl = program.platform;

(async () => {
    if (!staticUrl) {
        staticUrl = await utils.getPlatformStatic();
    }
    let usage = null;
    const packageJSON = require(path.resolve('./package.json'));
    if (program.version === 'new') {
        usage = getNewUsage(root);
    } else {
        usage = getUsage(root);
        if (program.type === 'component') {
            const libInfo = `${packageJSON.name}@${packageJSON.version}`;
            let screenShot = JSON.parse(usage.screenShot);
            screenShot = screenShot.map((screen) => `${staticUrl.replace(/\/$/, '')}/packages/${libInfo}/screenshots/${screen}`);
            usage.jsonSchema.screenShot = usage.screenShot = screenShot.join(',');
        }
    }
    if (usage) {
        fs.writeFileSync(path.join(root, 'usage.json'), JSON.stringify(usage, null, 4));
        if (packageJSON.lcapVersion === '0.3.0') {
            callZip();
        }
    } else {
        cli.error('该依赖库没有内容，请检查');
    }
})();

