#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const semver = require('semver');
const chalk = require('chalk');
const inquirer = require('inquirer');
const vusion = require('vusion-api');
const configurator = require('../lib/config');
const utils = require('../lib/utils');
const cli = vusion.cli;
const querystring = require('querystring');
const FormData = require('form-data');

const cwd = process.cwd();
const pkgPath = path.resolve(cwd, 'package.json');
if (!fs.existsSync(pkgPath)) {
    console.error('[ERROR] Not a npm package');
    console.error('Please locate into a npm package directory.');
    process.exit(1);
}
const pkg = require(pkgPath);

/**
 * Parse Commands
 */
const program = require('commander');
program
    .usage('<version>')
    .option('--tag <tag>', 'Registers the published package with the given tag')
    .option('--access <public|restricted>', 'Tells the registry whether this package should be published as public or restricted.')
    .option('--manager <manager>', 'Change publish manager. For example: --manager cnpm')
    .option('--registry <url>', 'Use custom registry if manager default registry is not you want. For example: --registry https://registry.npm.taobao.org')
    .option('--skip-npm', 'Skip npm publish. Useful when package published but error happened')
    .parse(process.argv);

const name = pkg.name;
const currentVersion = pkg.version;
const version = program.args[0] && semver.clean(program.args[0]);

async function checkConfig(cwd) {
    const checkFiles = ['nasl.extension.json', 'usage.json'];
    const results = await Promise.all(checkFiles.map((fileName) => {
        const filePath = path.resolve(cwd, fileName);
        return fs.pathExists(filePath);
    }));

    const index = results.find((r) => r);

    if (index === -1) {
        console.error('[ERROR] Not contain nasl.extension.json or usage.json');
        process.exit(1);
    }
}

async function publish() {
    console.info(`  Package ${chalk.yellow(name)}`);
    console.info('  Current version: ' + chalk.cyan(currentVersion));

    // pkg.version = version || pkg.version;

    try {
        if (pkg.scripts.build && pkg.scripts.usage) {
            await cli.exec('npm run build && npm run usage');
        } else if (pkg.scripts.build) {
            await cli.exec('npm run build');
        }

        await checkConfig(cwd);
        const zipPath = path.resolve(cwd, pkg.name + '@' + pkg.version + '.zip');

        const authorization = await utils.getAuthorization();
        const pfAxios = await utils.getPlatformAxios();
        const formData = new FormData();
        formData.append('zipFile', fs.createReadStream(zipPath));
        formData.append('tags', '');
        formData.append('description', '');
        const result = await pfAxios.post('/api/v1/asset-center/library/upload', formData, {
            headers: {
                ...formData.getHeaders(),
                Cookie: `authorization=${authorization}`,
            },
        });
        if (result.data.success) {
            cli.done('Successfully published!');
        } else {
            throw new Error(result.data.msg);
        }
    } catch (e) {
        cli.error('Failed to publish!');
        e && console.error(e.response ? e.response.data : e);
        process.exit(1);
    }
}

publish();
