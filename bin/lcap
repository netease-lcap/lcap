#!/usr/bin/env node

/**
 * Check version
 * Check node version before requiring/doing anything else
 */
const checker = require('../lib/checker');

if (!checker.checkNode())
    process.exit(1);
checker.checkUpgrade();

const chalk = require('chalk');
const pkg = require('../package.json');
const didYouMean = require('didyoumean');

// Setting edit distance to 60% of the input string's length
didYouMean.threshold = 0.6;

/**
 * Parse Commands
 */
const program = require('commander');
program
    .usage('<command> [options]')
    .version(pkg.version)
    // Project commands
    .command('init <type> <name>', `Initialize a kind of material: ${chalk.yellow('component')} ...}`)
    .command('config <action> <key> [value]', 'Configure CLI options')
    .command('publish <version>', 'Publish a new version')
    // .command('screenshot <url|local-file>', 'Take a screenshot of a web page')
    .command('deploy', 'Push files to NOS static bucket')
    .command('readme', 'Generate final readable README.md from api.yaml and docs')
    .command('usage', 'Generate usage.json')
    .command('build', 'build lcap extension files')
    .command('vetur', 'Generate tags.json and attributes.json for Vetur')
    .command('create', 'Generate Component and Logic');

// output help information on unknown commands
program.on('command:*', ([cmd]) => {
    const availableCommands = program.commands.map((cmd) => cmd._name);
    if (availableCommands.includes(cmd))
        return;

    program.outputHelp();
    console.error();
    console.error();
    console.error(`  ` + chalk.red(`Unknown command ${chalk.yellow(cmd)}.`));
    suggestCommands(cmd, availableCommands);
});

const oldOutputHelp = program.outputHelp;
program.outputHelp = function (cb) {
    oldOutputHelp.call(program, (text) => {
        const colored = text
            .replace(/^Usage: (.+)\n/mg, (m, $1) => 'Usage: ' + chalk.cyan($1) + '\n')
            .replace(/^ {2}(\w+)/mg, (m, $1) => '  ' + chalk.yellow($1));
        const more = `\n  Run ${chalk.cyan(`lcap <command> --help`)} for detailed usage of given command.\n`;
        const result = colored + more;
        return cb ? cb(result) : result;
    });
};

function suggestCommands(unknownCommand, availableCommands) {
    const suggestion = didYouMean(unknownCommand, availableCommands);
    if (suggestion) {
        console.error(`  ` + chalk.red(`Did you mean ${chalk.yellow(suggestion)}?`));
    }
}

program.parse(process.argv);
