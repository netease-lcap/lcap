#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const semver = require('semver');
const vusion = require('vusion-api');
const upload = require('../lib/upload');
const cli = vusion.cli;

/**
 * Parse Commands
 */
const program = require('commander');
program
    .usage('[source]')
    .description(`Push files to NOS static bucket. Defaults to 'public'`)
    .option('--platform <platform>', `deploy platform`)
    .option('--bucket <bucket>', `deploy bucket`)
    .option('--username <username>', `deploy username`)
    .option('--password <password>', `deploy password`)
    .option('-v, --version-level <version-level>', `Specify the minimum version level after '@'. 'major', 'minor', 'patch'`, 'patch')
    .option('-n, --name <name>', `Custom package name`)
    .option('-V, --version <packageVersion>', `Custom package version`)
    .parse(process.argv);

let source = program.args[0] || 'public';
const cwd = process.cwd();
source = path.resolve(cwd, source);

if (!fs.existsSync(source)) {
    console.error(`Cannot find source: ${source}`);
    process.exit(1);
}
const { platform, bucket, username, password } = program;
const pkgPath = path.resolve(cwd, 'package.json');

if (!fs.existsSync(pkgPath)) {
    console.error('[ERROR] Not a npm package');
    console.error('Please locate into a npm package source.');
    process.exit(1);
}
const pkg = require(pkgPath);
let prefixPath = '';
if (pkg.vusion) {
    const usage = require(path.resolve(cwd, 'usage.json'));
    prefixPath = usage?.compilerInfoMap?.js?.prefix;
}
let version = program.packageVersion || pkg.version;
if (!semver.valid(version)) {
    console.error(`Invalid version ${version}`);
    process.exit(1);
}
if (program.versionLevel === 'major')
    version = version.split('.')[0];
else if (program.versionLevel === 'minor')
    version = version.split('.').slice(0, 2).join('.');

const prefix = `packages/${prefixPath ? prefixPath + '/' : ''}${typeof program.name === 'string' ? program.name : pkg.name}@${version}`;
let formFiles;

if (fs.statSync(source).isDirectory()) {
    formFiles = vusion.fs.listAllFiles(source, {
        type: 'file',
        dot: false,
        patterns: ['!**/node_modules', '!**/.git', '!public/**'],
    });
} else {
    formFiles = [source];
}

if (!formFiles.length) {
    cli.warn('No files found!');
    process.exit(0);
}

formFiles = formFiles.map((filePath) => {
    let relativePath = path.relative(cwd, filePath).replace(/^public[\\/]/, '').replace(/\\/g, '/');
    relativePath = path.posix.join(prefix, relativePath);
    return { name: relativePath, path: filePath };
});

upload(formFiles, { platform, bucket, username, password });
