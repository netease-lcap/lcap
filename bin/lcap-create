#!/usr/bin/env node

const path = require('path');
const { Plop, run } = require('plop');
const args = process.argv.slice(2);
const argv = require('minimist')(args);
const { getFrameWorkKind, isOldProject, isLcapLibrary } = require('../lib/project');
const { exec } = require('../lib/exec');
const logger = require('../lib/logger');

const cwd = process.cwd();
const pkg = require(path.resolve(cwd, 'package.json'));

const framework = getFrameWorkKind(pkg);

(async function () {
  if (!isLcapLibrary(pkg)) {
    logger.error(`该项目不是 codewave 依赖库，不支持此命令`);
    return;
  }

  if (pkg.devDependencies && pkg.devDependencies['@lcap/builder'] && semver.gt(semver.minVersion(pkg.devDependencies['@lcap/builder']).version, '1.5.9')) {
    execSync('npx lcap-scripts create');
    return;
  }

  if (isOldProject()) {
    Plop.launch({
      cwd: argv.cwd,
      configPath: path.join(__dirname, '../plopfile.js'),
      require: argv.require,
      completion: argv.completion,
    }, (env) => {
        const options = {
            ...env,
            dest: cwd,
        };
        run(options, { }, true);
    });
    return;
  }

  Plop.launch({
    cwd: argv.cwd,
    configPath: path.join(__dirname, `../templates/${framework}/index.js`),
    require: argv.require,
    completion: argv.completion,
  }, (env) => {
      const options = {
          ...env,
          dest: cwd,
      };
      run(options, { }, true);
  });
})();