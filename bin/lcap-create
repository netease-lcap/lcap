#!/usr/bin/env node
const path = require('path');
const { Plop, run } = require('plop');
const args = process.argv.slice(2);
const argv = require('minimist')(args);
const fs = require('fs-extra');

const cwd = process.cwd();
const pkg = require(path.resolve(cwd, 'package.json'));

const getFrameWorkKind = (pkgInfo) => {
    if (pkgInfo.peerDependencies && Object.keys(pkgInfo.peerDependencies).includes('@tarojs/taro')) {
      return 'taro';
    }

    if (pkgInfo.peerDependencies && Object.keys(pkgInfo.peerDependencies).includes('react')) {
      return 'react';
    }

    if (
      pkgInfo.peerDependencies
      && pkgInfo.peerDependencies.vue
      && (pkgInfo.peerDependencies.vue.startsWith('3.') || pkgInfo.peerDependencies.vue.startsWith('^3.'))
    ) {
      return 'vue3';
    }

    if (
      pkgInfo.peerDependencies
      && pkgInfo.peerDependencies.vue
      && (pkgInfo.peerDependencies.vue.startsWith('2.') || pkgInfo.peerDependencies.vue.startsWith('^2.'))
    ) {
      return 'vue2';
    }

    return '';
};

const framework = getFrameWorkKind(pkg);

if (fs.existsSync(path.resolve(cwd, 'vusion.config.js'))) {
    Plop.launch({
        cwd: argv.cwd,
        configPath: path.join(__dirname, '../plopfile.js'),
        require: argv.require,
        completion: argv.completion,
    }, (env) => {
        const options = {
            ...env,
            dest: cwd,
        };
        run(options, { }, true);
    });
} else if (!pkg.lcapIdeVersion || !framework) {
    console.error(`该项目不支持`);
} else {
    Plop.launch({
        cwd: argv.cwd,
        configPath: path.join(__dirname, `../templates/${framework}/index.js`),
        require: argv.require,
        completion: argv.completion,
    }, (env) => {
        const options = {
            ...env,
            dest: cwd,
        };
        run(options, { }, true);
    });
}

